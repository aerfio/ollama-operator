version: "2"
linters:
  default: none
  enable:
    - asciicheck
    - bodyclose
    - copyloopvar
    - depguard
    - durationcheck
    - errcheck
    - forbidigo
    - forcetypeassert
    - gocheckcompilerdirectives
    - gocritic
    - gosec
    - govet
    - loggercheck
    - makezero
    - nilerr
    - nosprintfhostport
    - prealloc
    - revive
    - sloglint
    - staticcheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
  settings:
    staticcheck:
      checks:
        - all
        # - -QF1001
        # - -QF1003
        - -QF1008
    depguard:
      rules:
        no-old-yaml-pkg:
          deny:
            - pkg: gopkg.in/yaml.v2
              desc: please use gopkg.in/yaml.v3, not v2
        no-sync-atomic:
          deny:
            - pkg: sync/atomic
              desc: please use type-safe atomics from go.uber.org/atomic
        only-log-slog:
          deny:
            - pkg: golang.org/x/exp/slog
              desc: please use "log/slog" instead
            - pkg: github.com/sagikazarmark/slog-shim
              desc: please use "log/slog" instead
        only-std-errors-pkg:
          deny:
            - pkg: github.com/pkg/errors
              desc: Should be replaced by standard lib "errors" package or "fmt.Errorf" or "go.uber.org/multierr" package
            - pkg: github.com/go-errors/errors
              desc: Should be replaced by standard lib "errors" package or "fmt.Errorf" or "go.uber.org/multierr" package
            - pkg: golang.org/x/xerrors
              desc: Should be replaced by standard lib "errors" package or "fmt.Errorf" or "go.uber.org/multierr" package
    errcheck:
      check-type-assertions: true
      check-blank: true
    forbidigo:
      forbid:
        - pattern: .*http\.(Get|Post).*
          msg: Do not use Get/Post methods exported by "http" package, they use global http client, which doesnt have proper timeouts. Use http client created for example by github.com/hashicorp/go-cleanhttp. It should be created in main func and passed down to any struct that uses it.
        - pattern: .*http\.DefaultClient.*
          msg: Do not use http.DefaultClient, it is a global struct without proper timeouts. Use http client created for example by github.com/hashicorp/go-cleanhttp. It should be created in main func and passed down to any struct that uses it.
      exclude-godoc-examples: true
    gocritic:
      disabled-checks:
        - rangeValCopy
        - unnamedResult
        - hugeParam
        - paramTypeCombine
        - typeDefFirst
        - evalOrder
      enabled-tags:
        - performance
        - diagnostic
        - opinionated
        - style
        - experimental
    gosec:
      excludes:
        - G108
        - G601
        - G204
    paralleltest:
      ignore-missing: true
    revive:
      rules:
        - name: indent-error-flow
          disabled: true
    usestdlibvars:
      time-month: true
      time-layout: true
      crypto-hash: true
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      - linters:
          - revive
        text: blank-imports
      - linters:
          - forbidigo
        path: _test\.go
        text: http
      - linters:
          - forcetypeassert
          - goconst
          - gosec
        path: _test\.go
    paths:
      - zz_generated\..+\.go$
      - third_party$
      - builtin$
      - examples$
formatters:
  enable:
    - gci
    - gofmt
    - gofumpt
  settings:
    gci:
      sections:
        - standard
        - default
        - localmodule
        - prefix(aerf.io)
        - blank
        - dot
      custom-order: true
    gofmt:
      simplify: true
      rewrite-rules:
        - pattern: interface{}
          replacement: any
        - pattern: a[b:len(a)]
          replacement: a[b:]
    gofumpt:
      module-path: aerf.io/ollama-operator
      extra-rules: true
  exclusions:
    generated: lax
    paths:
      - zz_generated\..+\.go$
      - third_party$
      - builtin$
      - examples$
