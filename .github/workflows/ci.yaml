name: CI
"on":
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main
      - release-*

env:
  # renovate: datasource=github-releases depName=golangci/golangci-lint
  GOLANGCI_LINT_VERSION: v2.4.0
  # renovate: datasource=github-releases depName=kubernetes-sigs/kind
  KIND_VERSION: v0.30.0
  # bump this manually when the kind version changes!
  KIND_NODE_IMAGE: kindest/node:v1.31.0@sha256:53df588e04085fd41ae12de0c3fe4c72f7013bba32a20e7325357a1ac94ba865

jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
      - run: go mod tidy -diff
      - run: |
          make test
      - run: |
          git diff --exit-code
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
      - run: |
          make build
      - run: |
          git diff --exit-code
  lint:
    runs-on: ubuntu-24.04
    # https://github.com/golangci/golangci-lint-action?tab=readme-ov-file#annotations
    permissions:
      # Required: allow read access to the content for analysis.
      contents: read
      # Optional: allow read access to pull request. Use with `only-new-issues` option.
      pull-requests: read
      # Optional: allow write access to checks to allow the action to annotate code in the PR.
      checks: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
          cache: false # golangci-lint caches go modules
      - name: golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
  # check-vulnerabilities:
  #   runs-on: ubuntu-24.04
  #   steps:
  #     - uses: golang/govulncheck-action@b625fbe08f3bccbe446d94fbf87fcc875a4f50ee # v1.0.4
  #       with:
  #         go-version-file: go.mod
  build-container-image:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
      - uses: ko-build/setup-ko@3aebd0597dc1e9d1a26bcfdb7cbeb19c131d3037 # v0.7
        with:
          version: v0.16.0
      - run: |
          ko build ./cmd/operator --sbom none --bare --tags "sha-$(git rev-parse --short=7 HEAD)"
  build-helm-chart:
    runs-on: ubuntu-24.04
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Helm binary
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
      - name: Login to ghcr with Helm
        run: |
          helm registry login ghcr.io -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}
      - name: Push helm chart
        run: |
          version="0.0.0-$(git describe --always --dirty --tags)"
          helm package ./helm/chart/ollama-operator --app-version "sha-$(git rev-parse --short=7 HEAD)" --version "$version" -d out
          helm push "./out/ollama-operator-${version}.tgz" oci://ghcr.io/${{ github.repository_owner }}/helm-charts
  e2e:
    needs:
      - build-container-image
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
      - name: Install chainsaw
        uses: kyverno/action-install-chainsaw@6354895e0f99ab23d3e38d85cf5c71b5dc21d727 # v0.2.13
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
        with:
          version: ${{ env.KIND_VERSION }}
          config: ./e2e/config/kind-config.yaml
          node_image: ${{ env.KIND_NODE_IMAGE }}
          wait: 3m
          cluster_name: e2e-tests
      - name: Install ollama-operator in kind cluster
        run: |
          imageSHA="sha-$(git rev-parse --short=7 HEAD)"
          echo "installing ollama-operator with container image tag: $imageSHA"
          ./e2e/scripts/install.sh "$imageSHA"
      - name: Run e2e tests
        run: |
          chainsaw test --config ./e2e/config/.chainsaw.yaml --test-dir ./e2e/scenarios
      - name: Export kind logs
        if: ${{ always() }}
        run: |
          rm -rf ./logs
          kind export logs ./logs --name e2e-tests
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ always() }}
        with:
          name: logs
          path: ./logs
      - name: Produce step summary
        if: ${{ always() }}
        run: |
          {
            echo "# E2E test summary:"
            echo
            echo "\`\`\`json"
            echo "$(cat chainsaw-report.json)"
            echo "\`\`\`"
          } >> $GITHUB_STEP_SUMMARY

  lint-e2e-config:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: go.mod
      - name: Lint chainsaw config and test files
        run: |
          make lint-chainsaw-tests
