// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// JSONPatchApplyConfiguration represents a declarative configuration of the JSONPatch type for use
// with apply.
type JSONPatchApplyConfiguration struct {
	JSONPatch []JSONPatchOperationApplyConfiguration `json:"jsonPatch,omitempty"`
}

// JSONPatchApplyConfiguration constructs a declarative configuration of the JSONPatch type for use with
// apply.
func JSONPatch() *JSONPatchApplyConfiguration {
	return &JSONPatchApplyConfiguration{}
}

// WithJSONPatch adds the given value to the JSONPatch field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the JSONPatch field.
func (b *JSONPatchApplyConfiguration) WithJSONPatch(values ...*JSONPatchOperationApplyConfiguration) *JSONPatchApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithJSONPatch")
		}
		b.JSONPatch = append(b.JSONPatch, *values[i])
	}
	return b
}
