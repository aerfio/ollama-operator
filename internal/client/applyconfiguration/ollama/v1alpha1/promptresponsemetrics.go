// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PromptResponseMetricsApplyConfiguration represents a declarative configuration of the PromptResponseMetrics type for use
// with apply.
type PromptResponseMetricsApplyConfiguration struct {
	TotalDuration      *v1.Duration `json:"totalDuration,omitempty"`
	LoadDuration       *v1.Duration `json:"loadDuration,omitempty"`
	PromptEvalCount    *int64       `json:"promptEvalCount,omitempty"`
	PromptEvalDuration *v1.Duration `json:"promptEvalDuration,omitempty"`
	PromptEvalRate     *string      `json:"promptEvalRate,omitempty"`
	EvalCount          *int64       `json:"evalCount,omitempty"`
	EvalDuration       *v1.Duration `json:"evalDuration,omitempty"`
	EvalRate           *string      `json:"evalRate,omitempty"`
}

// PromptResponseMetricsApplyConfiguration constructs a declarative configuration of the PromptResponseMetrics type for use with
// apply.
func PromptResponseMetrics() *PromptResponseMetricsApplyConfiguration {
	return &PromptResponseMetricsApplyConfiguration{}
}

// WithTotalDuration sets the TotalDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalDuration field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithTotalDuration(value v1.Duration) *PromptResponseMetricsApplyConfiguration {
	b.TotalDuration = &value
	return b
}

// WithLoadDuration sets the LoadDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoadDuration field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithLoadDuration(value v1.Duration) *PromptResponseMetricsApplyConfiguration {
	b.LoadDuration = &value
	return b
}

// WithPromptEvalCount sets the PromptEvalCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PromptEvalCount field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithPromptEvalCount(value int64) *PromptResponseMetricsApplyConfiguration {
	b.PromptEvalCount = &value
	return b
}

// WithPromptEvalDuration sets the PromptEvalDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PromptEvalDuration field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithPromptEvalDuration(value v1.Duration) *PromptResponseMetricsApplyConfiguration {
	b.PromptEvalDuration = &value
	return b
}

// WithPromptEvalRate sets the PromptEvalRate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PromptEvalRate field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithPromptEvalRate(value string) *PromptResponseMetricsApplyConfiguration {
	b.PromptEvalRate = &value
	return b
}

// WithEvalCount sets the EvalCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EvalCount field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithEvalCount(value int64) *PromptResponseMetricsApplyConfiguration {
	b.EvalCount = &value
	return b
}

// WithEvalDuration sets the EvalDuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EvalDuration field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithEvalDuration(value v1.Duration) *PromptResponseMetricsApplyConfiguration {
	b.EvalDuration = &value
	return b
}

// WithEvalRate sets the EvalRate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EvalRate field is set to the value of the last call.
func (b *PromptResponseMetricsApplyConfiguration) WithEvalRate(value string) *PromptResponseMetricsApplyConfiguration {
	b.EvalRate = &value
	return b
}
