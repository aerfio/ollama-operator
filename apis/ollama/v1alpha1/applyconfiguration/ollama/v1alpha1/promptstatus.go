// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

// PromptStatusApplyConfiguration represents a declarative configuration of the PromptStatus type for use
// with apply.
type PromptStatusApplyConfiguration struct {
	ConditionedStatusApplyConfiguration `json:",inline"`
	ObservedGeneration                  *int64                                   `json:"observedGeneration,omitempty"`
	Response                            *string                                  `json:"response,omitempty"`
	Context                             *string                                  `json:"context,omitempty"`
	PromptResponseMeta                  *PromptResponseMetaApplyConfiguration    `json:"meta,omitempty"`
	PromptResponseMetrics               *PromptResponseMetricsApplyConfiguration `json:"metrics,omitempty"`
}

// PromptStatusApplyConfiguration constructs a declarative configuration of the PromptStatus type for use with
// apply.
func PromptStatus() *PromptStatusApplyConfiguration {
	return &PromptStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *PromptStatusApplyConfiguration) WithConditions(values ...v1.Condition) *PromptStatusApplyConfiguration {
	for i := range values {
		b.ConditionedStatusApplyConfiguration.Conditions = append(b.ConditionedStatusApplyConfiguration.Conditions, values[i])
	}
	return b
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *PromptStatusApplyConfiguration) WithObservedGeneration(value int64) *PromptStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithResponse sets the Response field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Response field is set to the value of the last call.
func (b *PromptStatusApplyConfiguration) WithResponse(value string) *PromptStatusApplyConfiguration {
	b.Response = &value
	return b
}

// WithContext sets the Context field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Context field is set to the value of the last call.
func (b *PromptStatusApplyConfiguration) WithContext(value string) *PromptStatusApplyConfiguration {
	b.Context = &value
	return b
}

// WithPromptResponseMeta sets the PromptResponseMeta field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PromptResponseMeta field is set to the value of the last call.
func (b *PromptStatusApplyConfiguration) WithPromptResponseMeta(value *PromptResponseMetaApplyConfiguration) *PromptStatusApplyConfiguration {
	b.PromptResponseMeta = value
	return b
}

// WithPromptResponseMetrics sets the PromptResponseMetrics field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PromptResponseMetrics field is set to the value of the last call.
func (b *PromptStatusApplyConfiguration) WithPromptResponseMetrics(value *PromptResponseMetricsApplyConfiguration) *PromptStatusApplyConfiguration {
	b.PromptResponseMetrics = value
	return b
}
