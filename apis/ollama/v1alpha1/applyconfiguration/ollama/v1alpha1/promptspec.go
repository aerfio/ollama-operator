// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// PromptSpecApplyConfiguration represents a declarative configuration of the PromptSpec type for use
// with apply.
type PromptSpecApplyConfiguration struct {
	ModelRef *ModelRefApplyConfiguration     `json:"modelRef,omitempty"`
	Prompt   *string                         `json:"prompt,omitempty"`
	Context  *string                         `json:"context,omitempty"`
	Suffix   *string                         `json:"suffix,omitempty"`
	System   *string                         `json:"system,omitempty"`
	Template *string                         `json:"template,omitempty"`
	Options  *runtime.RawExtension           `json:"options,omitempty"`
	Images   []ImageSourceApplyConfiguration `json:"images,omitempty"`
}

// PromptSpecApplyConfiguration constructs a declarative configuration of the PromptSpec type for use with
// apply.
func PromptSpec() *PromptSpecApplyConfiguration {
	return &PromptSpecApplyConfiguration{}
}

// WithModelRef sets the ModelRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ModelRef field is set to the value of the last call.
func (b *PromptSpecApplyConfiguration) WithModelRef(value *ModelRefApplyConfiguration) *PromptSpecApplyConfiguration {
	b.ModelRef = value
	return b
}

// WithPrompt sets the Prompt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Prompt field is set to the value of the last call.
func (b *PromptSpecApplyConfiguration) WithPrompt(value string) *PromptSpecApplyConfiguration {
	b.Prompt = &value
	return b
}

// WithContext sets the Context field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Context field is set to the value of the last call.
func (b *PromptSpecApplyConfiguration) WithContext(value string) *PromptSpecApplyConfiguration {
	b.Context = &value
	return b
}

// WithSuffix sets the Suffix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Suffix field is set to the value of the last call.
func (b *PromptSpecApplyConfiguration) WithSuffix(value string) *PromptSpecApplyConfiguration {
	b.Suffix = &value
	return b
}

// WithSystem sets the System field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the System field is set to the value of the last call.
func (b *PromptSpecApplyConfiguration) WithSystem(value string) *PromptSpecApplyConfiguration {
	b.System = &value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *PromptSpecApplyConfiguration) WithTemplate(value string) *PromptSpecApplyConfiguration {
	b.Template = &value
	return b
}

// WithOptions sets the Options field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Options field is set to the value of the last call.
func (b *PromptSpecApplyConfiguration) WithOptions(value runtime.RawExtension) *PromptSpecApplyConfiguration {
	b.Options = &value
	return b
}

// WithImages adds the given value to the Images field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Images field.
func (b *PromptSpecApplyConfiguration) WithImages(values ...*ImageSourceApplyConfiguration) *PromptSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithImages")
		}
		b.Images = append(b.Images, *values[i])
	}
	return b
}
